import{_ as a,c as t,o as i,a0 as o}from"./chunks/framework.NZiM7anj.js";const p=JSON.parse('{"title":"Release Process & Tagging","description":"Managing versioning, changelogs, and deployments for Realworld.","frontmatter":{"title":"Release Process & Tagging","description":"Managing versioning, changelogs, and deployments for Realworld.","order":3},"headers":[],"relativePath":"git-strategy/release-process.md","filePath":"git-strategy/release-process.md"}'),s={name:"git-strategy/release-process.md"};function n(l,e,r,c,d,g){return i(),t("div",null,e[0]||(e[0]=[o('<h1 id="release-process-tagging" tabindex="-1">Release Process &amp; Tagging <a class="header-anchor" href="#release-process-tagging" aria-label="Permalink to &quot;Release Process &amp; Tagging&quot;">​</a></h1><h2 id="branch-to-release-mapping" tabindex="-1">Branch-to-Release Mapping <a class="header-anchor" href="#branch-to-release-mapping" aria-label="Permalink to &quot;Branch-to-Release Mapping&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Branch</th><th>Tag Suffix</th><th>Deployment</th></tr></thead><tbody><tr><td><code>main</code></td><td>none</td><td>Production</td></tr><tr><td><code>stage</code></td><td><code>-stage</code></td><td>Staging</td></tr><tr><td><code>dev</code></td><td><em>none</em></td><td>Dev (auto-deploy only)</td></tr></tbody></table><h2 id="creating-releases" tabindex="-1">Creating Releases <a class="header-anchor" href="#creating-releases" aria-label="Permalink to &quot;Creating Releases&quot;">​</a></h2><p>Releases happen after merging <code>stage</code> into <code>main</code>.<br> We use <strong>release-it</strong> with <strong>@release-it-plugins/lerna-changelog</strong> to:</p><ul><li>Automatically bump version numbers based on commit history.</li><li>Generate changelog entries.</li><li>Create Git tags following semantic versioning.</li><li>Publish GitHub Releases with changelog notes.</li></ul><h3 id="typical-release-command" tabindex="-1">Typical Release Command <a class="header-anchor" href="#typical-release-command" aria-label="Permalink to &quot;Typical Release Command&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes catppuccin-mocha catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#89B4FA;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">npx</span><span style="--shiki-light:#A6E3A1;--shiki-dark:#A6E3A1;"> release-it</span><span style="--shiki-light:#A6E3A1;--shiki-dark:#A6E3A1;"> --ci</span></span></code></pre></div><p>This command will:</p><ul><li>Detect version bump from commit messages (<code>feat</code>, <code>fix</code>, etc.).</li><li>Update <code>package.json</code> version.</li><li>Generate or update <code>CHANGELOG.md</code>.</li><li>Commit the changes.</li><li>Create a Git tag (e.g., <code>v1.2.3</code> or <code>v1.2.3-stage</code>).</li><li>Push tags and release notes to GitHub.</li></ul><h2 id="ci-integration" tabindex="-1">CI Integration <a class="header-anchor" href="#ci-integration" aria-label="Permalink to &quot;CI Integration&quot;">​</a></h2><p>In your GitHub Actions workflow:</p><ul><li>Run <code>release-it</code> only on merges to <code>main</code> or <code>stage</code>.</li><li>Skip tagging on <code>dev</code>.</li></ul>',13)]))}const m=a(s,[["render",n]]);export{p as __pageData,m as default};
