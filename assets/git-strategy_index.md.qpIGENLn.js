import{_ as l,C as d,c as g,o as a,a0 as h,b as i,j as s,w as t,a as o,G as n,a1 as c}from"./chunks/framework.NZiM7anj.js";const k=JSON.parse('{"title":"Git Branching & Release Strategy","description":"Overview of the Git branching, merging, and release strategy for the Realworld project.","frontmatter":{"title":"Git Branching & Release Strategy","description":"Overview of the Git branching, merging, and release strategy for the Realworld project."},"headers":[],"relativePath":"git-strategy/index.md","filePath":"git-strategy/index.md"}'),u={name:"git-strategy/index.md"};function m(p,e,f,b,A,v){const r=d("Mermaid");return a(),g("div",null,[e[2]||(e[2]=h(`<h1 id="git-branching-release-strategy" tabindex="-1">Git Branching &amp; Release Strategy <a class="header-anchor" href="#git-branching-release-strategy" aria-label="Permalink to &quot;Git Branching &amp; Release Strategy&quot;">​</a></h1><p>This document describes the branching, merging, and release strategy for the <strong>Realworld</strong> project.<br> It is designed to ensure:</p><ul><li><strong>Clean and traceable commit history</strong></li><li><strong>Reliable changelog generation</strong></li><li><strong>Smooth deployments</strong> across environments (Dev, Stage, Prod)</li><li>Alignment with <strong>Agile</strong> workflows</li></ul><hr><h2 id="branch-structure" tabindex="-1">Branch Structure <a class="header-anchor" href="#branch-structure" aria-label="Permalink to &quot;Branch Structure&quot;">​</a></h2><p>We use <strong>long-lived environment branches</strong> and <strong>short-lived feature branches</strong>.</p><h3 id="permanent-branches" tabindex="-1">Permanent Branches <a class="header-anchor" href="#permanent-branches" aria-label="Permalink to &quot;Permanent Branches&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Branch</th><th>Purpose</th><th>Deployment Target</th></tr></thead><tbody><tr><td><code>main</code></td><td>Production-ready code. Contains only tested, approved features.</td><td><strong>Prod</strong></td></tr><tr><td><code>stage</code></td><td>Pre-production environment for final QA. Mirrors <code>main</code> before releases.</td><td><strong>Stage</strong></td></tr><tr><td><code>dev</code></td><td>Integration environment where features are tested together.</td><td><strong>Dev</strong></td></tr></tbody></table><hr><h3 id="temporary-branches" tabindex="-1">Temporary Branches <a class="header-anchor" href="#temporary-branches" aria-label="Permalink to &quot;Temporary Branches&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Branch Prefix</th><th>Purpose</th></tr></thead><tbody><tr><td><code>feat/*</code></td><td>A full <strong>user story</strong> or large feature. Merges into <code>dev</code>.</td></tr><tr><td><code>task/*</code></td><td>A smaller sub-task within a feature. Merges into a <code>feat/*</code> branch.</td></tr><tr><td><code>bugfix/*</code></td><td>Fixes for non-critical issues. Merges into <code>dev</code>.</td></tr><tr><td><code>hotfix/*</code></td><td>Critical fixes for production. Merges into both <code>main</code> and <code>stage</code> (and <code>dev</code> if relevant).</td></tr></tbody></table><hr><h2 id="merge-rules" tabindex="-1">Merge Rules <a class="header-anchor" href="#merge-rules" aria-label="Permalink to &quot;Merge Rules&quot;">​</a></h2><p>We enforce <strong>different merge styles</strong> depending on the branch direction:</p><table tabindex="0"><thead><tr><th>From → To</th><th>Merge Type</th><th>Reason</th></tr></thead><tbody><tr><td><code>task/*</code> → <code>feat/*</code></td><td><strong>Squash</strong></td><td>Keeps feature branch history clean.</td></tr><tr><td><code>feat/*</code> → <code>dev</code></td><td><strong>Squash</strong></td><td>One commit per feature → easier review and revert.</td></tr><tr><td><code>dev</code> → <code>stage</code></td><td><strong>Merge commit</strong></td><td>Preserves individual feature commits for changelog generation.</td></tr><tr><td><code>stage</code> → <code>main</code></td><td><strong>Merge commit</strong></td><td>Ensures changelog includes all feature commit messages.</td></tr><tr><td><code>hotfix/*</code> → <code>main</code></td><td><strong>Squash</strong> or <strong>merge commit</strong> depending on urgency.</td><td></td></tr></tbody></table><hr><h2 id="commit-message-pr-title-rules" tabindex="-1">Commit Message &amp; PR Title Rules <a class="header-anchor" href="#commit-message-pr-title-rules" aria-label="Permalink to &quot;Commit Message &amp; PR Title Rules&quot;">​</a></h2><p>We follow the <strong><a href="https://www.conventionalcommits.org/" target="_blank" rel="noreferrer">Conventional Commits</a></strong> standard:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes catppuccin-mocha catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span>&lt;type&gt;(&lt;scope&gt;): &lt;short summary&gt;</span></span></code></pre></div><p><strong>Examples:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes catppuccin-mocha catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span>feat(auth): add refresh token support</span></span>
<span class="line"><span>fix(ui): correct navbar alignment</span></span>
<span class="line"><span>docs(readme): update setup instructions</span></span></code></pre></div><p><strong>Allowed types:</strong></p><ul><li><code>feat</code> – New feature</li><li><code>fix</code> – Bug fix</li><li><code>docs</code> – Documentation change</li><li><code>style</code> – Code style (no logic changes)</li><li><code>refactor</code> – Code restructuring</li><li><code>perf</code> – Performance improvement</li><li><code>test</code> – Testing changes</li><li><code>chore</code> – Maintenance tasks</li></ul><p><strong>Why?</strong></p><ul><li>PR titles are <strong>used for squash commits</strong>.</li><li>Changelogs are <strong>generated from commit messages</strong>.</li></ul><hr><h2 id="pull-request-guidelines" tabindex="-1">Pull Request Guidelines <a class="header-anchor" href="#pull-request-guidelines" aria-label="Permalink to &quot;Pull Request Guidelines&quot;">​</a></h2><ol><li><strong>Target the correct branch:</strong><ul><li><code>feat/*</code> → <code>dev</code></li><li><code>task/*</code> → <code>feat/*</code></li><li><code>bugfix/*</code> → <code>dev</code></li><li><code>hotfix/*</code> → <code>main</code> (and <code>stage</code>/<code>dev</code> if needed)</li></ul></li><li><strong>PR title</strong> must follow Conventional Commits.</li><li>Keep PRs small and focused on a single scope.</li><li>Request at least <strong>one reviewer</strong>.</li><li>Pass <strong>all checks</strong> (lint, tests, build) before merging.</li></ol><hr><h2 id="release-flow" tabindex="-1">Release Flow <a class="header-anchor" href="#release-flow" aria-label="Permalink to &quot;Release Flow&quot;">​</a></h2><h3 id="development-cycle" tabindex="-1">Development Cycle <a class="header-anchor" href="#development-cycle" aria-label="Permalink to &quot;Development Cycle&quot;">​</a></h3><ol><li>Developers work in <code>task/*</code> or <code>feat/*</code> branches.</li><li>Merge features into <code>dev</code> (via squash merge).</li><li>Deploy <code>dev</code> branch automatically to the Dev environment.</li></ol><h3 id="staging-release" tabindex="-1">Staging Release <a class="header-anchor" href="#staging-release" aria-label="Permalink to &quot;Staging Release&quot;">​</a></h3><ol><li>Merge <code>dev</code> → <code>stage</code> (merge commit).</li><li>Deploy <code>stage</code> branch to the Stage environment.</li><li>Run final QA.</li></ol><h3 id="production-release" tabindex="-1">Production Release <a class="header-anchor" href="#production-release" aria-label="Permalink to &quot;Production Release&quot;">​</a></h3><ol><li>Merge <code>stage</code> → <code>main</code> (merge commit).</li><li>Tag the release using <code>release-it</code> (see below).</li><li>Deploy to production.</li></ol><hr><h2 id="changelog-tagging" tabindex="-1">Changelog &amp; Tagging <a class="header-anchor" href="#changelog-tagging" aria-label="Permalink to &quot;Changelog &amp; Tagging&quot;">​</a></h2><p>We use <strong>release-it</strong> with <strong>@release-it-plugins/lerna-changelog</strong> to:</p><ul><li>Generate changelogs from commit history</li><li>Tag releases automatically</li><li>Publish to GitHub Releases</li></ul><p><strong>Tag format:</strong></p><ul><li>Production: <code>v1.2.3</code></li><li>Stage: <code>v1.2.3-stage</code></li><li>Dev: <em>(no tags — auto-deploy only)</em></li></ul><hr><h2 id="example-workflow" tabindex="-1">Example Workflow <a class="header-anchor" href="#example-workflow" aria-label="Permalink to &quot;Example Workflow&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes catppuccin-mocha catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span>feat/auth-login  → (squash) → dev</span></span>
<span class="line"><span>dev              → (merge commit) → stage</span></span>
<span class="line"><span>stage            → (merge commit) → main → tag &amp; release</span></span></code></pre></div><p><strong>Hotfix example:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes catppuccin-mocha catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span>hotfix/urgent-logout-bug → main (+ stage, dev)</span></span></code></pre></div><hr><h2 id="branch-protections" tabindex="-1">Branch Protections <a class="header-anchor" href="#branch-protections" aria-label="Permalink to &quot;Branch Protections&quot;">​</a></h2><p>We enforce the following in GitHub branch settings:</p><ul><li><strong>Require PR reviews</strong> before merging.</li><li><strong>Require status checks</strong> to pass.</li><li><strong>Restrict who can push</strong> to <code>main</code>, <code>stage</code>, and <code>dev</code>.</li><li><strong>Disallow direct commits</strong> to permanent branches.</li></ul><h2 id="flowchart-of-branching-strategy" tabindex="-1">Flowchart of Branching Strategy <a class="header-anchor" href="#flowchart-of-branching-strategy" aria-label="Permalink to &quot;Flowchart of Branching Strategy&quot;">​</a></h2>`,52)),(a(),i(c,null,{default:t(()=>[n(r,{id:"mermaid-491",class:"mermaid",graph:"flowchart%20TD%0A%20%20%20%20main%5Bmain%3Cbr%3E%3Csub%3EProduction%3C%2Fsub%3E%5D%0A%20%20%20%20stage%5Bstage%3Cbr%3E%3Csub%3EPre-production%20QA%3C%2Fsub%3E%5D%0A%20%20%20%20dev%5Bdev%3Cbr%3E%3Csub%3EIntegration%20%26%20Dev%20testing%3C%2Fsub%3E%5D%0A%20%20%20%20feat_auth%5Bfeat%2Fauth%3Cbr%3E%3Csub%3EUser%20Story%3A%20Authentication%20Feature%3C%2Fsub%3E%5D%0A%20%20%20%20feat_ui%5Bfeat%2Fui%3Cbr%3E%3Csub%3EUser%20Story%3A%20UI%20Feature%3C%2Fsub%3E%5D%0A%20%20%20%20bugfix_login%5Bbugfix%2Flogin%3Cbr%3E%3Csub%3EBug%20Fix%3A%20Login%20Issue%3C%2Fsub%3E%5D%0A%20%20%20%20task_api%5Btask%2Fapi%3Cbr%3E%3Csub%3ETask%3A%20API%20Implementation%3C%2Fsub%3E%5D%0A%20%20%20%20task_auth_api%5Btask%2Fauth-login-screen%3Cbr%3E%3Csub%3ETask%3A%20Auth%20Login%20Screen%3C%2Fsub%3E%5D%0A%20%20%20%20task_ui_fix%5Btask%2Fui-fix%3Cbr%3E%3Csub%3ETask%3A%20UI%20Fix%3C%2Fsub%3E%5D%0A%20%20%20%20task_refactor%5Btask%2Frefactor%3Cbr%3E%3Csub%3ETask%3A%20Refactor%20Login%3C%2Fsub%3E%5D%0A%0A%20%20%20%20%25%25%20Merge%20arrows%20show%20direction%20of%20merging%2Fpull%20requests%0A%20%20%20%20task_auth_api%20--%3E%20feat_auth%0A%20%20%20%20task_api%20--%3E%20feat_auth%0A%20%20%20%20task_ui_fix%20--%3E%20feat_ui%0A%20%20%20%20task_refactor%20--%3E%20bugfix_login%0A%0A%20%20%20%20feat_auth%20--%3E%20dev%0A%20%20%20%20feat_ui%20--%3E%20dev%0A%20%20%20%20bugfix_login%20--%3E%20dev%0A%0A%20%20%20%20dev%20--%3E%20stage%0A%20%20%20%20stage%20--%3E%20main%0A%0A%20%20%20%20%25%25%20Labels%20for%20typical%20PR%20or%20merge%20types%0A%25%25%20%20%20%20%20%20%20%20TODO%3A%20Add%20correct%20links%20to%20your%20documentation%0A%20%20%20%20click%20feat_auth%20%22https%3A%2F%2Fyourcompany.com%2Fdocs%2Fgit-strategy%23feature-branches%22%20%22Feature%20Branches%22%0A%20%20%20%20click%20feat_ui%20%22https%3A%2F%2Fyourcompany.com%2Fdocs%2Fgit-strategy%23feature-branches%22%0A%20%20%20%20click%20bugfix_login%20%22https%3A%2F%2Fyourcompany.com%2Fdocs%2Fgit-strategy%23bugfix-branches%22%0A%20%20%20%20click%20dev%20%22https%3A%2F%2Fyourcompany.com%2Fdocs%2Fgit-strategy%23development-branch%22%0A%20%20%20%20click%20stage%20%22https%3A%2F%2Fyourcompany.com%2Fdocs%2Fgit-strategy%23staging-branch%22%0A%20%20%20%20click%20main%20%22https%3A%2F%2Fyourcompany.com%2Fdocs%2Fgit-strategy%23production-branch%22%0A"})]),fallback:t(()=>e[0]||(e[0]=[o(" Loading... ",-1)])),_:1})),e[3]||(e[3]=s("h2",{id:"git-graph",tabindex:"-1"},[o("Git Graph "),s("a",{class:"header-anchor",href:"#git-graph","aria-label":'Permalink to "Git Graph"'},"​")],-1)),(a(),i(c,null,{default:t(()=>[n(r,{id:"mermaid-495",class:"mermaid",graph:"gitGraph%0A%20%20%20%20commit%20id%3A%20%22chore%3A%20initial%20commit%22%0A%0A%20%20%20%20branch%20dev%0A%20%20%20%20checkout%20dev%0A%20%20%20%20commit%20id%3A%20%22chore%3A%20setup%20dev%20environment%22%0A%0A%20%20%20%20checkout%20main%0A%20%20%20%20branch%20stage%0A%0A%20%20%20%20checkout%20main%0A%0A%20%20%20%20branch%20feat%2Fauth%0A%20%20%20%20commit%20id%3A%20%22feat(auth)%3A%20add%20authentication%20feature%22%0A%0A%20%20%20%20branch%20task%2Fapi%0A%20%20%20%20commit%20id%3A%20%22fix(api)%3A%20correct%20API%20response%20format%22%0A%20%20%20%20checkout%20feat%2Fauth%0A%20%20%20%20merge%20task%2Fapi%0A%0A%20%20%20%20branch%20feat%2Fui%0A%20%20%20%20commit%20id%3A%20%22feat(ui)%3A%20implement%20UI%20feature%22%0A%0A%20%20%20%20branch%20task%2Fui-fix%0A%20%20%20%20commit%20id%3A%20%22fix(ui)%3A%20fix%20UI%20bug%20in%20header%22%0A%20%20%20%20checkout%20feat%2Fui%0A%20%20%20%20merge%20task%2Fui-fix%0A%0A%20%20%20%20branch%20bugfix%2Flogin%0A%20%20%20%20commit%20id%3A%20%22fix(login)%3A%20fix%20login%20issue%20with%20invalid%20token%22%0A%0A%20%20%20%20branch%20task%2Frefactor%0A%20%20%20%20commit%20id%3A%20%22refactor(login)%3A%20improve%20login%20flow%20code%20quality%22%0A%20%20%20%20checkout%20bugfix%2Flogin%0A%20%20%20%20merge%20task%2Frefactor%0A%0A%20%20%20%20checkout%20dev%0A%20%20%20%20merge%20feat%2Fauth%0A%20%20%20%20merge%20feat%2Fui%0A%20%20%20%20merge%20bugfix%2Flogin%0A%0A%20%20%20%20checkout%20stage%0A%20%20%20%20merge%20dev%20tag%3A%20%22chore(release)%3A%20v1.0.0-stage%22%0A%0A%20%20%20%20checkout%20main%0A%20%20%20%20merge%20stage%20tag%3A%20%22chore(release)%3A%20v1.0.0%22%0A"})]),fallback:t(()=>e[1]||(e[1]=[o(" Loading... ",-1)])),_:1}))])}const x=l(u,[["render",m]]);export{k as __pageData,x as default};
