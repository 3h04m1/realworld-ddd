import{_ as t,c as r,o as a,a0 as d}from"./chunks/framework.NZiM7anj.js";const p=JSON.parse('{"title":"Branch Structure & Purpose","description":"Detailed explanation of Git branch types and their roles in the Realworld project.","frontmatter":{"title":"Branch Structure & Purpose","description":"Detailed explanation of Git branch types and their roles in the Realworld project.","order":2},"headers":[],"relativePath":"git-strategy/branch-structure.md","filePath":"git-strategy/branch-structure.md"}'),o={name:"git-strategy/branch-structure.md"};function c(n,e,s,i,h,l){return a(),r("div",null,e[0]||(e[0]=[d('<h1 id="branch-structure-purpose" tabindex="-1">Branch Structure &amp; Purpose <a class="header-anchor" href="#branch-structure-purpose" aria-label="Permalink to &quot;Branch Structure &amp; Purpose&quot;">​</a></h1><p>To maintain order and clarity, our Git repository uses two main categories of branches:</p><h2 id="_1-permanent-branches" tabindex="-1">1. Permanent Branches <a class="header-anchor" href="#_1-permanent-branches" aria-label="Permalink to &quot;1. Permanent Branches&quot;">​</a></h2><p>These long-lived branches correspond to deployment environments or release stages.<br> They are protected and receive changes only via Pull Requests (PRs).</p><table tabindex="0"><thead><tr><th>Branch</th><th>Description</th><th>Deployment Target</th><th>Protection &amp; Rules</th></tr></thead><tbody><tr><td><code>main</code></td><td>Stable, production-ready code. Contains only thoroughly tested and approved features.</td><td>Production server</td><td>Protected branch; only merges from <code>stage</code> branch; requires PR reviews and status checks.</td></tr><tr><td><code>stage</code></td><td>Pre-production testing branch where final QA is performed before production release.</td><td>Staging server</td><td>Protected branch; only merges from <code>dev</code> branch; used for release candidate testing.</td></tr><tr><td><code>dev</code></td><td>Integration branch where features from multiple developers are merged and tested together.</td><td>Development environment</td><td>Protected branch; receives squash-merged feature branches (<code>feat/*</code> and <code>bugfix/*</code>).</td></tr></tbody></table><h3 id="why-separate-these" tabindex="-1">Why separate these? <a class="header-anchor" href="#why-separate-these" aria-label="Permalink to &quot;Why separate these?&quot;">​</a></h3><p>This separation allows isolated testing at each stage.</p><ul><li><code>dev</code> helps catch integration issues early.</li><li><code>stage</code> ensures release candidates are production-like.</li><li><code>main</code> remains clean and stable for customers.</li></ul><h2 id="_2-temporary-branches" tabindex="-1">2. Temporary Branches <a class="header-anchor" href="#_2-temporary-branches" aria-label="Permalink to &quot;2. Temporary Branches&quot;">​</a></h2><p>Temporary branches are short-lived and focused on specific work items:</p><table tabindex="0"><thead><tr><th>Branch Prefix</th><th>Purpose</th><th>Merge Target</th></tr></thead><tbody><tr><td><code>feat/*</code></td><td>Full user stories or large features.</td><td><code>dev</code></td></tr><tr><td><code>task/*</code></td><td>Smaller subtasks within a feature.</td><td>The related <code>feat/*</code> branch</td></tr><tr><td><code>bugfix/*</code></td><td>Fixes for non-critical bugs.</td><td><code>dev</code></td></tr><tr><td><code>hotfix/*</code></td><td>Urgent fixes for production issues.</td><td><code>main</code>, <code>stage</code>, and optionally <code>dev</code></td></tr></tbody></table><h3 id="branch-lifecycle" tabindex="-1">Branch lifecycle <a class="header-anchor" href="#branch-lifecycle" aria-label="Permalink to &quot;Branch lifecycle&quot;">​</a></h3><ul><li><code>task/*</code> branches are deleted immediately after merging into their <code>feat/*</code> branch.</li><li><code>feat/*</code> and <code>bugfix/*</code> branches are deleted after merging into <code>dev</code>.</li><li><code>hotfix/*</code> branches are deleted after merging into all relevant permanent branches.</li></ul>',13)]))}const b=t(o,[["render",c]]);export{p as __pageData,b as default};
